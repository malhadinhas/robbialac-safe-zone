/**
 * tsconfig.server.json
 * ---------------------
 * Este arquivo é a configuração do compilador TypeScript (tsc) específica para o CÓDIGO DO SERVIDOR.
 * Define como os arquivos .ts do backend serão transpilados para JavaScript,
 * quais recursos de linguagem usar, onde encontrar os fontes e onde colocar o resultado.
 */
{
  "compilerOptions": {
    /**
     * Define a versão do JavaScript alvo. ES2020 é uma escolha moderna para Node.js,
     * suportando recursos como Optional Chaining (`?.`), Nullish Coalescing (`??`), etc.
     */
    "target": "ES2020",
    /**
     * Define o sistema de módulos a ser usado no JS gerado. "NodeNext" adapta-se
     * às regras modernas do Node.js (baseado no "type": "module" do package.json),
     * suportando tanto ESM (`import`) quanto CommonJS (`require`) corretamente.
     */
    "module": "NodeNext",
    /**
     * Define como o TypeScript encontra os módulos importados. "NodeNext" usa a
     * estratégia de resolução mais recente do Node.js, alinhada com `module: "NodeNext"`.
     */
    "moduleResolution": "NodeNext",
    /**
     * Facilita a importação de módulos CommonJS em código ESM (e vice-versa),
     * tratando `require` e `export default` de forma mais compatível. Recomendado.
     */
    "esModuleInterop": true,
    /**
     * Ativa um conjunto de verificações de tipo rigorosas (strictNullChecks, noImplicitAny, etc.).
     * Altamente recomendado para pegar erros em tempo de compilação e melhorar a qualidade do código.
     */
    "strict": true,
    /**
     * Pula a verificação de tipos dos arquivos de definição de bibliotecas (`.d.ts` em node_modules).
     * Pode acelerar a compilação, especialmente em projetos grandes.
     */
    "skipLibCheck": true,
    /**
     * Especifica o diretório de saída para os arquivos JavaScript compilados.
     * O resultado do build do servidor será colocado na pasta 'dist'.
     */
    "outDir": "dist",
    /**
     * Define o diretório base para resolver importações não relativas.
     * Usado em conjunto com `paths`. "." significa a pasta onde este tsconfig está.
     */
    "baseUrl": ".",
    /**
     * Define mapeamentos (aliases) para caminhos de importação.
     * Aqui, qualquer import começando com `@/` será resolvido a partir da pasta `src/`.
     * Ex: `import x from '@/utils'` será resolvido como `import x from './src/utils'`.
     * Torna os imports mais limpos e independentes da estrutura de pastas.
     */
    "paths": {
      "@/*": ["src/*"]
    }
  },
  /**
   * Define quais arquivos e diretórios o compilador TypeScript deve incluir no processo.
   * - "server.ts": O ponto de entrada principal do servidor.
   * - "src/**/*.ts": Todos os arquivos TypeScript dentro da pasta `src` e seus subdiretórios.
   */
  "include": ["server.ts", "src/**/*.ts"],
  /**
   * Define quais arquivos e diretórios devem ser ignorados pelo compilador.
   * Excluir "node_modules" é essencial para evitar a compilação das dependências.
   */
  "exclude": ["node_modules"]
} 